--- EMaterialFlags.h	Sun Jan 04 14:23:44 2015
+++ EMaterialFlags.h	Fri Aug 07 22:59:31 2015
@@ -87,7 +87,9 @@
 		EMF_POLYGON_OFFSET = 0x80000,
 
         //! Flag for blend factor
-		EMF_BLEND_FACTOR = 0x160000
+		EMF_BLEND_FACTOR = 0x160000,
+
+		EMF_MATERIAL_TYPE = 0x320000
 	};
 
 } // end namespace video
--- IBoneSceneNode.h	Sun Jan 06 02:40:58 2013
+++ IBoneSceneNode.h	Fri Aug 07 22:59:56 2015
@@ -84,7 +84,7 @@
 
 		//! The render method.
 		/** Does nothing as bones are not visible. */
-		virtual void render() { }
+		virtual void render(f32 interpolate=1.f) { }
 
 		//! How the relative transformation of the bone is used
 		virtual void setSkinningSpace( E_BONE_SKINNING_SPACE space ) =0;
--- ICameraSceneNode.h	Sun Jan 04 14:23:44 2015
+++ ICameraSceneNode.h	Fri Aug 07 23:09:32 2015
@@ -166,7 +166,7 @@
 		virtual void bindTargetAndRotation(bool bound) =0;
 
 		//! Updates the matrices without uploading them to the driver
-		virtual void updateMatrices() = 0;
+		virtual void updateMatrices(f32 interpolate=1.f) = 0;
 
 		//! Queries if the camera scene node's rotation and its target position are bound together.
 		/** @see bindTargetAndRotation() */
--- IrrCompileConfig.h	Sat Jan 10 21:24:40 2015
+++ IrrCompileConfig.h	Fri Aug 07 23:01:00 2015
@@ -130,7 +130,7 @@
 
 //! Add a leak-hunter to Irrlicht which helps finding unreleased reference counted objects.
 //! NOTE: This is slow and should only be used for debugging
-//#define _IRR_COMPILE_WITH_LEAK_HUNTER_
+#define _IRR_COMPILE_WITH_LEAK_HUNTER_
 #ifdef NO_IRR_COMPILE_WITH_LEAK_HUNTER_
 #undef _IRR_COMPILE_WITH_LEAK_HUNTER_
 #endif
@@ -176,6 +176,8 @@
 //! Only define _IRR_COMPILE_WITH_DIRECT3D_8_ if you have an appropriate DXSDK, e.g. Summer 2004
 // #define _IRR_COMPILE_WITH_DIRECT3D_8_
 #define _IRR_COMPILE_WITH_DIRECT3D_9_
+
+#define NO_IRR_COMPILE_WITH_DIRECT3D_9_
 //! Only define _IRR_COMPILE_WITH_DIRECT3D_11_ if you have an appropriate DXSDK
 //! Download: http://msdn.microsoft.com/en-us/windows/desktop/hh852363.aspx
 #define _IRR_COMPILE_WITH_DIRECT3D_11_
--- ISceneManager.h	Sat Jan 10 21:24:40 2015
+++ ISceneManager.h	Fri Aug 07 23:14:09 2015
@@ -1172,7 +1172,8 @@
 		IVideoDriver::beginScene() and IVideoDriver::endScene(). Please note that
 		the scene is not only drawn when calling this, but also animated
 		by existing scene node animators, culling of scene nodes is done, etc. */
-		virtual void drawAll() = 0;
+		virtual void drawAll(f32 interpolate=1.f) = 0;
+		virtual void captureAll() = 0;
 
 		//! Creates a rotation animator, which rotates the attached scene node around itself.
 		/** \param rotationSpeed Specifies the speed of the animation in degree per 10 milliseconds.
@@ -1677,6 +1678,10 @@
 		virtual bool isCulled(const ISceneNode* node) const =0;
 
 		virtual bool isCulled(core::aabbox3d<f32> tbox, scene::E_CULLING_TYPE type, const core::matrix4& absoluteTransformation) const = 0;
+
+		virtual void fastDrawAll_init(const core::vector3df &camPos) =0;
+        virtual void fastDrawAll(const core::matrix4 &projectionMatrix,const core::matrix4 &viewMatrix) = 0;
+        virtual void fastDrawAll_end() =0;
 
 	protected:
 
--- ISceneNode.h	Sun Jan 04 14:23:44 2015
+++ ISceneNode.h	Fri Aug 07 23:04:18 2015
@@ -98,6 +98,20 @@
 			}
 		}
 
+        virtual void fastRegister() {}
+
+        virtual void captureState()
+        {
+            CapturedRotation = RelativeRotation;
+            CapturedTranslation = RelativeTranslation;
+            CapturedScale = RelativeScale;
+            if (IsVisible)
+			{
+				ISceneNodeList::Iterator it = Children.begin();
+				for (; it != Children.end(); ++it)
+					(*it)->captureState();
+			}
+        }
 
 		//! OnAnimate() is called just before rendering the whole scene.
 		/** Nodes may calculate or store animations here, and may do other useful things,
@@ -138,7 +152,9 @@
 
 
 		//! Renders the node.
-		virtual void render() = 0;
+		virtual void render(f32 interpolate=1.f) = 0;
+
+		virtual void fastRender(const irr::core::vector3df &camWorldPos) {};
 
 
 		//! Returns the name of the node.
@@ -677,6 +693,44 @@
 				AbsoluteTransformation = getRelativeTransformation();
 		}
 
+        virtual core::matrix4 interpolatedAbsoluteTransform(f32 interpolate=1.f)
+        {
+            core::matrix4 mat;
+            if (interpolate==1.f) {
+                mat = getRelativeTransformation();
+
+                if (Parent)
+                {
+                    mat = Parent->getAbsoluteTransformation() * mat;
+                }
+
+                return mat;
+            }
+
+            irr::core::vector3df rotationDegs = RelativeRotation-CapturedRotation;
+            while (rotationDegs.X>=180.f) { rotationDegs.X-=360.f; } while (rotationDegs.X<-180.f) { rotationDegs.X+=360.f; }
+            while (rotationDegs.Y>=180.f) { rotationDegs.Y-=360.f; } while (rotationDegs.Y<-180.f) { rotationDegs.Y+=360.f; }
+            while (rotationDegs.Z>=180.f) { rotationDegs.Z-=360.f; } while (rotationDegs.Z<-180.f) { rotationDegs.Z+=360.f; }
+            rotationDegs *= interpolate;
+
+			mat.setRotationDegrees(CapturedRotation+rotationDegs);
+			mat.setTranslation((RelativeTranslation*interpolate)+(CapturedTranslation*(1.f-interpolate)));
+
+			//if (RelativeScale != core::vector3df(1.f,1.f,1.f))
+			//{
+            core::matrix4 smat;
+            smat.setScale((RelativeScale*interpolate)+(CapturedScale*(1.f-interpolate)));
+            mat *= smat;
+			//}
+
+            if (Parent)
+			{
+				mat =
+					Parent->interpolatedAbsoluteTransform(interpolate) * mat;
+			}
+
+            return mat;
+        }
 
 		//! Returns the parent of this scene node
 		/** \return A pointer to the parent. */
@@ -832,12 +886,15 @@
 
 		//! Relative translation of the scene node.
 		core::vector3df RelativeTranslation;
+		core::vector3df CapturedTranslation;
 
 		//! Relative rotation of the scene node.
 		core::vector3df RelativeRotation;
+		core::vector3df CapturedRotation;
 
 		//! Relative scale of the scene node.
 		core::vector3df RelativeScale;
+		core::vector3df CapturedScale;
 
 		//! Pointer to the parent
 		ISceneNode* Parent;
--- IVideoDriver.h	Sun Jan 04 14:23:44 2015
+++ IVideoDriver.h	Fri Aug 07 23:05:21 2015
@@ -302,6 +302,7 @@
 						case EMF_POLYGON_OFFSET:
 							material.PolygonOffsetDirection = Material.PolygonOffsetDirection;
 							material.PolygonOffsetFactor = Material.PolygonOffsetFactor; break;
+                        case EMF_MATERIAL_TYPE: material.MaterialType = Material.MaterialType; break;
 						}
 					}
 				}
@@ -1479,6 +1480,8 @@
 		virtual IVertexDescriptor* getVertexDescriptor(const core::stringc& pName) const = 0;
 
 		virtual u32 getVertexDescriptorCount() const = 0;
+
+		irr::scene::ISceneNode* currentlyRenderedNode;
 	};
 
 } // end namespace video
--- triangle3d.h	Sun Jan 04 14:23:44 2015
+++ triangle3d.h	Fri Aug 07 23:06:47 2015
@@ -240,6 +240,8 @@
 		vector3d<T> pointB;
 		vector3d<T> pointC;
 
+		u32 meshBufferIndex;
+
 	private:
 		// Using f64 instead of <T> to avoid integer overflows when T=int (maybe also less floating point troubles).
 		bool isOnSameSide(const vector3d<f64>& p1, const vector3d<f64>& p2,
