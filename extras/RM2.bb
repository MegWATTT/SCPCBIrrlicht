Graphics3D 640,480,0,2

AppTitle "Convert SCP-CB rooms (B3D generated by 3DWS) to RM2"

;Const HIT_MAP%=1
;Const HIT_PLAYER%=2

;Collisions HIT_PLAYER,HIT_MAP,2,2

Function StripPath$(file$) 
	
	If Len(file$)>0 
		
		For i=Len(file$) To 1 Step -1 
			
			mi$=Mid$(file$,i,1) 
			If mi$="\" Or mi$="/" Then Return name$ Else name$=mi$+name$ 
			
		Next 
		
	EndIf 
	
	Return name$ 
	
End Function 

Function StripFilename$(file$)
	;Local name$=""
	Local mi$=""
	Local lastSlash%=0
	If Len(file)>0
		For i%=1 To Len(file)
			mi=Mid(file$,i,1)
			If mi="\" Or mi="/" Then
				lastSlash=i
			EndIf
		Next
	EndIf
	
	Return Left(file,lastSlash)
End Function

Function EntityScaleX#(entity, globl=False) 
	If globl Then TFormVector 1,0,0,entity,0 Else TFormVector 1,0,0,entity,GetParent(entity) 
	Return Sqr(TFormedX()*TFormedX()+TFormedY()*TFormedY()+TFormedZ()*TFormedZ()) 
End Function 

Function EntityScaleY#(entity, globl=False)
	If globl Then TFormVector 0,1,0,entity,0 Else TFormVector 0,1,0,entity,GetParent(entity)  
	Return Sqr(TFormedX()*TFormedX()+TFormedY()*TFormedY()+TFormedZ()*TFormedZ()) 
End Function 

Function EntityScaleZ#(entity, globl=False)
	If globl Then TFormVector 0,0,1,entity,0 Else TFormVector 0,0,1,entity,GetParent(entity)  
	Return Sqr(TFormedX()*TFormedX()+TFormedY()*TFormedY()+TFormedZ()*TFormedZ()) 
End Function

Function Piece$(s$,entry,char$=" ")
	While Instr(s,char+char)
		s=Replace(s,char+char,char)
	Wend
	For n=1 To entry-1
		p=Instr(s,char)
		s=Right(s,Len(s)-p)
	Next
	p=Instr(s,char)
	If p<1
		a$=s
	Else
		a=Left(s,p-1)
	EndIf
	Return a
End Function

Function KeyValue$(entity,key$,defaultvalue$="")
	properties$=EntityName(entity)
	properties$=Replace(properties$,Chr(13),"")
	key$=Lower(key)
	Repeat
		p=Instr(properties,Chr(10))
		If p Then test$=(Left(properties,p-1)) Else test=properties
		testkey$=Piece(test,1,"=")
		testkey=Trim(testkey)
		testkey=Replace(testkey,Chr(34),"")
		testkey=Lower(testkey)
		If testkey=key Then
			value$=Piece(test,2,"=")
			value$=Trim(value$)
			value$=Replace(value$,Chr(34),"")
			Return value
		EndIf
		If Not p Then Return defaultvalue$
		properties=Right(properties,Len(properties)-p)
	Forever 
End Function

Function isAlpha%(tex%) ;detect transparency in textures
	Local temp1s$=StripPath(TextureName(tex))
	Local temp1i%
	If Instr(temp1s,".png")<>0 Or Instr(temp1s,".tga")<>0 Or Instr(temp1s,".tpic")<>0 Then ;texture is PNG or TARGA
		LockBuffer(TextureBuffer(tex))
		For x%=0 To TextureWidth(tex)-1
			For y%=0 To TextureHeight(tex)-1
				temp1i=ReadPixelFast(x,y,TextureBuffer(tex))
				temp1i=temp1i Shr 24
				If temp1i<255 Then
					UnlockBuffer(TextureBuffer(tex))
					;DebugLog temp1s + " has transparency."
					Return 3 ;texture has transparency
				EndIf
			Next
		Next
		UnlockBuffer(TextureBuffer(tex))
		;DebugLog temp1s + " is opaque."
		Return 1 ;texture is opaque
	Else If Instr(temp1s,"_lm")<>0 Then ;texture is a lightmap
		;DebugLog temp1s + " is a lightmap."
		Return 2
	EndIf
	;DebugLog temp1s + " is opaque."
	Return 1 ;texture is opaque
End Function

Type TexSaves
	Field name$
	Field id%
	Field alpha%
End Type

Type TempWayPoint
	Field name$
	Field id%
	Field connectionCount%
	Field connections$[10]
	Field x#,y#,z#
End Type

Function SaveRoomMesh(BaseMesh%,filename$) ;base mesh should be a 3D World Studio mesh
	
	DebugLog filename + "___" + BaseMesh
	
	;If Right(filename, 5)="rmesh" Then filename=Left(filename, Len(filename)-5)+"b3d"
	;DebugLog filename
	
	Local node%,classname$
	Local surf%,brush%,tex%,texname$
	
	Local temp1i%
	
	Local tempmesh% = BaseMesh
	
	Local f% = WriteFile(filename)
	
	Local drawnmesh% = CreateMesh()
	Local hiddenmesh% = CreateMesh()
	Local nonsolidmesh% = CreateMesh()
	
	Local tsIDs% = 1
	
	For c%=1 To CountChildren(tempmesh)
		
		node=GetChild(tempmesh,c)	
		classname$=Lower(KeyValue(node,"classname"))
		
		Select classname
			Case "mesh"
				ScaleMesh node,EntityScaleX(node),EntityScaleY(node),EntityScaleZ(node)
				RotateMesh node,EntityPitch(node),EntityYaw(node),EntityRoll(node)
				PositionMesh node,EntityX(node),EntityY(node),EntityZ(node)
				
				isSolid% = False
				nonSolid$ = Lower(KeyValue(node,"nonsolid"))
				Select nonSolid
					Case "true"
						isSolid = False
					Case "false"
						isSolid = True
					Default
						isSolid = Not Int(nonSolid)
				End Select
				
				newTS% = True
				
				surf=GetSurface(node,1)
				brush=GetSurfaceBrush(surf)
				
				If brush<>0 Then
					tex = GetBrushTexture(brush,0)
					If tex<>0 Then
						For ts.TexSaves = Each TexSaves
							If ts\name=StripPath(TextureName(tex)) Then
								newTs = False : Exit
							EndIf
						Next
						
						If newTs Then
							ts.TexSaves = New TexSaves
							ts\id = tsIDs
							tsIDs=tsIDs+1
							ts\name = StripPath(TextureName(tex))
							ts\alpha = isAlpha(tex)
						EndIf
						
						FreeTexture tex
					EndIf
					
					newTs = True
					tex = GetBrushTexture(brush,1)
					
					If tex<>0 Then
						For ts.TexSaves = Each TexSaves
							If ts\name=StripPath(TextureName(tex)) Then
								newTs = False : Exit
							EndIf
						Next
						
						If newTs Then
							ts.TexSaves = New TexSaves
							ts\id = tsIDs
							tsIDs=tsIDs+1
							ts\name = StripPath(TextureName(tex))
							ts\alpha = isAlpha(tex)
						EndIf
						
						FreeTexture tex
					EndIf
					FreeBrush brush
				EndIf
				
				If isSolid Then AddMesh node,drawnmesh Else AddMesh node,nonsolidmesh
			Case "brush"
				RotateMesh node,EntityPitch(node),EntityYaw(node),EntityRoll(node)
				PositionMesh node,EntityX(node),EntityY(node),EntityZ(node)
				
				isSolid% = False
				nonSolid$ = Lower(KeyValue(node,"nonsolid"))
				Select nonSolid
					Case "true"
						isSolid = False
					Case "false"
						isSolid = True
					Default
						isSolid = Not Int(nonSolid)
				End Select
				
				newTS% = True
				
				surf=GetSurface(node,1)
				brush=GetSurfaceBrush(surf)
				
				If brush<>0 Then
					tex = GetBrushTexture(brush,0)
					If tex<>0 Then
						For ts.TexSaves = Each TexSaves
							If ts\name=StripPath(TextureName(tex)) Then
								newTs = False : Exit
							EndIf
						Next
						
						If newTs Then
							ts.TexSaves = New TexSaves
							ts\id = tsIDs
							tsIDs=tsIDs+1
							ts\name = StripPath(TextureName(tex))
							ts\alpha = isAlpha(tex)
						EndIf
						
						FreeTexture tex
					EndIf
					
					newTs = True
					tex = GetBrushTexture(brush,1)
					
					If tex<>0 Then
						For ts.TexSaves = Each TexSaves
							If ts\name=StripPath(TextureName(tex)) Then
								newTs = False : Exit
							EndIf
						Next
						
						If newTs Then
							ts.TexSaves = New TexSaves
							ts\id = tsIDs
							tsIDs=tsIDs+1
							ts\name = StripPath(TextureName(tex))
							ts\alpha = isAlpha(tex)
						EndIf
						
						FreeTexture tex
					EndIf
					FreeBrush brush
				EndIf
				
				If isSolid Then AddMesh node,drawnmesh Else AddMesh node,nonsolidmesh
				
			Case "field_hit"
				RotateMesh node,EntityPitch(node),EntityYaw(node),EntityRoll(node)
				PositionMesh node,EntityX(node),EntityY(node),EntityZ(node)
				AddMesh node,hiddenmesh
		End Select
		
	Next
	
	WriteByte f,Asc("R") ;Room
	WriteByte f,Asc("M") ;Mesh
	WriteByte f,Asc("2") ;2
	
	temp1i=0
	
	Local wayPointIDs = 0
	
	;count point entities
	For c%=1 To CountChildren(tempmesh)
		node=GetChild(tempmesh,c)	
		classname$=Lower(KeyValue(node,"classname"))
		
		Select classname
			Case "screen","light","spotlight","soundemitter"
				temp1i=temp1i+1
			Case "waypoint"
				If (KeyValue(node,"name","")<>"") Then
					temp1i=temp1i+1
					wayPointIDs=wayPointIDs+1
					wp.TempWayPoint = New TempWayPoint
					wp\id = wayPointIDs
					wp\name = KeyValue(node,"name","")
					Local offsetCon% = 0
					For con%=0 To 9
						wp\connections[con-offsetCon] = KeyValue(node,"connection"+Str(con),"")
						If wp\connections[con-offsetCon]="" Then offsetCon=offsetCon+1
					Next
					wp\connectionCount = 10-offsetCon
				EndIf
		End Select
		
	Next
	
	If temp1i>252 Then RuntimeError "Too many entities"
	
	;get rid of any waypoints that aren't connected in any way
	For wp.TempWayPoint = Each TempWayPoint
		If wp\connectionCount<=0 Then
			selfDestruct = True
			For wp2.TempWayPoint = Each TempWayPoint
				For con%=0 To 9
					If wp2\connections[con]=wp\name Then
						selfDestruct = False
						Exit
					EndIf
				Next
			Next
			If selfDestruct Then
				wayPointIDs=wayPointIDs-1
				For wp2.TempWayPoint = Each TempWayPoint
					If wp2\id>wp\id Then wp2\id=wp2\id-1
				Next
				Delete wp
				temp1i=temp1i-1
			EndIf
		EndIf
	Next
	
	WriteByte f,tsIDs-1
	
	Local wtsIDs = 0
	For j=1 To tsIDs-1
		For ts.TexSaves = Each TexSaves
			If ts\id=j Then
				WriteByte f,Len(ts\name) ;we assume that texture names don't need more than 255 characters
				For i=1 To Len(ts\name)
					WriteByte f,Asc(Mid(ts\name,i,1))
				Next
				WriteByte f,ts\alpha
				Exit
			EndIf
		Next
	Next
	
	WriteByte f,temp1i+3 ;add mesh entites (drawn and hidden)
	
	WriteByte f,0 ; = drawn
	;texture names
;	temp1i = 0
;	For ts.TexSaves = Each TexSaves
;		ts\id = temp1i
;		temp1i=temp1i+1
;	Next
	
	WriteByte f,CountSurfaces(drawnmesh) : DebugLog CountSurfaces(drawnmesh)
	For i%=1 To CountSurfaces(drawnmesh)
		surf=GetSurface(drawnmesh,i)
		brush=GetSurfaceBrush(surf)
		
		tex0%=0
		tex0%=GetBrushTexture(brush,0)
		tex1%=0
		tex1%=GetBrushTexture(brush,1)
		
		
		If tex0<>0 Then
			If TextureName(tex0)="" Then
				FreeTexture tex0
				tex0=0
			EndIf
		EndIf
		If tex1<>0 Then
			If TextureName(tex1)="" Then
				FreeTexture tex1
				tex1=0
			EndIf
		EndIf
		
		WriteByte(f,(tex0<>0) Or ((tex1<>0) Shl 1))
		
		If tex0<>0 Then
			;WriteByte(f,1)
			For ts.TexSaves = Each TexSaves
				If ts\name = StripPath(TextureName(tex0)) Then
					WriteByte f,ts\id ;just save the id
				EndIf
			Next
			;WriteByte(f,isAlpha(tex))
			;texname=TextureName(tex)
			;WriteString f,StripPath(texname)
			FreeTexture tex0
		Else
			;WriteByte(f,0)
		EndIf
		
		If tex1<>0 Then
			;WriteByte(f,isAlpha(tex))
			For ts.TexSaves = Each TexSaves
				If ts\name = StripPath(TextureName(tex1)) Then
					WriteByte f,ts\id ;just save the id
				EndIf
			Next
			FreeTexture tex1
		Else
			;WriteByte(f,0)
		EndIf
		
		FreeBrush brush
		
		WriteInt f,CountVertices(surf)
		For j%=0 To CountVertices(surf)-1
			
			;world coords
			WriteFloat f,VertexX(surf,j)
			WriteFloat f,VertexY(surf,j)
			WriteFloat f,VertexZ(surf,j)
			
			;texture coords
			WriteFloat f,VertexU(surf,j,0)
			WriteFloat f,VertexV(surf,j,0)
			
			WriteFloat f,VertexU(surf,j,1)
			WriteFloat f,VertexV(surf,j,1)
			
			;colors
			WriteByte f,VertexRed(surf,j)
			WriteByte f,VertexGreen(surf,j)
			WriteByte f,VertexBlue(surf,j)
		Next
		
		WriteInt f,CountTriangles(surf)
		For j%=0 To CountTriangles(surf)-1
			WriteInt f,TriangleVertex(surf,j,0)
			WriteInt f,TriangleVertex(surf,j,1)
			WriteInt f,TriangleVertex(surf,j,2)
		Next
	Next
	
	WriteByte f,1 ; = drawn
	
	WriteByte f,CountSurfaces(nonsolidmesh) : DebugLog CountSurfaces(nonsolidmesh)
	For i%=1 To CountSurfaces(nonsolidmesh)
		surf=GetSurface(nonsolidmesh,i)
		brush=GetSurfaceBrush(surf)
		
		tex0%=0
		tex0%=GetBrushTexture(brush,0)
		tex1%=0
		tex1%=GetBrushTexture(brush,1)
		
		WriteByte(f,(tex0<>0) Or ((tex1<>0) Shl 1))
		
		If tex0<>0 Then
			;WriteByte(f,1)
			For ts.TexSaves = Each TexSaves
				If ts\name = StripPath(TextureName(tex)) Then
					WriteByte f,ts\id ;just save the id
				EndIf
			Next
			;WriteByte(f,isAlpha(tex))
			;texname=TextureName(tex)
			;WriteString f,StripPath(texname)
			FreeTexture tex
		Else
			;WriteByte(f,0)
		EndIf
		
		If tex1<>0 Then
			;WriteByte(f,isAlpha(tex))
			For ts.TexSaves = Each TexSaves
				If ts\name = StripPath(TextureName(tex)) Then
					WriteByte f,ts\id ;just save the id
				EndIf
			Next
			FreeTexture tex1
		Else
			;WriteByte(f,0)
		EndIf
		
		FreeBrush brush
		
		WriteInt f,CountVertices(surf)
		For j%=0 To CountVertices(surf)-1
			
			;world coords
			WriteFloat f,VertexX(surf,j)
			WriteFloat f,VertexY(surf,j)
			WriteFloat f,VertexZ(surf,j)
			
			;texture coords
			WriteFloat f,VertexU(surf,j,0)
			WriteFloat f,VertexV(surf,j,0)
			
			WriteFloat f,VertexU(surf,j,1)
			WriteFloat f,VertexV(surf,j,1)
			
			;colors
			WriteByte f,VertexRed(surf,j)
			WriteByte f,VertexGreen(surf,j)
			WriteByte f,VertexBlue(surf,j)
		Next
		
		WriteInt f,CountTriangles(surf)
		For j%=0 To CountTriangles(surf)-1
			WriteInt f,TriangleVertex(surf,j,0)
			WriteInt f,TriangleVertex(surf,j,1)
			WriteInt f,TriangleVertex(surf,j,2)
		Next
	Next
	
	;WriteString f,"hidden"
	
	WriteByte f,2 ;hidden
	;WriteInt f,CountSurfaces(hiddenmesh)
	
	temp2i% = 0
	For i%=1 To CountSurfaces(hiddenmesh)
		surf=GetSurface(hiddenmesh,i)
		temp2i=temp2i+CountVertices(surf)
	Next
	WriteInt f,temp2i
	
	For i%=1 To CountSurfaces(hiddenmesh)
		surf=GetSurface(hiddenmesh,i)
		For j%=0 To CountVertices(surf)-1
			;world coords
			WriteFloat f,VertexX(surf,j)
			WriteFloat f,VertexY(surf,j)
			WriteFloat f,VertexZ(surf,j)
		Next
	Next
	
	temp2i=0
	For i%=1 To CountSurfaces(hiddenmesh)
		surf=GetSurface(hiddenmesh,i)
		temp2i=temp2i+CountTriangles(surf)
	Next
	WriteInt f,temp2i
	
	For i%=1 To CountSurfaces(hiddenmesh)
		surf=GetSurface(hiddenmesh,i)
		For j%=0 To CountTriangles(surf)-1
			WriteInt f,TriangleVertex(surf,j,0)
			WriteInt f,TriangleVertex(surf,j,1)
			WriteInt f,TriangleVertex(surf,j,2)
		Next
	Next
	
	;WriteString f,"point_ents"
	
	For wp.TempWayPoint = Each TempWayPoint
		WriteByte f,4
		
		WriteFloat f,wp\x
		WriteFloat f,wp\y
		WriteFloat f,wp\z
		
		WriteByte f,wp\connectionCount
		
		error% = 0
		For con%=0 To wp\connectionCount-1
			error = con
			For wp2.TempWayPoint = Each TempWayPoint
				If Lower(wp2\name)=Lower(wp\connections[con]) Then
					error = 0
					WriteByte f,wp2\id
					Exit
				EndIf
			Next
			If error>0 Then RuntimeError "Waypoint "+wp\name+" is linked to non-existant waypoint "+wp\connections[error]
		Next
	Next
	
	For c%=1 To CountChildren(tempmesh)
		
		node=GetChild(tempmesh,c)
		classname$=Lower(KeyValue(node,"classname"))
		
		Select classname
			Case "screen"
				WriteByte f,3 ;WriteString f,classname
				
				WriteFloat f,EntityX(node)
				WriteFloat f,EntityY(node)
				WriteFloat f,EntityZ(node)
				
				WriteByte f,Len(KeyValue(node,"imgpath","")) ;we assume that texture names don't need more than 255 characters
				For i=1 To Len(KeyValue(node,"imgpath",""))
					WriteByte f,Asc(Mid(KeyValue(node,"imgpath",""),i,1))
				Next
;			Case "waypoint"
;				WriteByte f,4 ;WriteString f,classname
;				
;				WriteFloat f,EntityX(node)
;				WriteFloat f,EntityY(node)
;				WriteFloat f,EntityZ(node)
			Case "light"
				WriteByte f,5 ;WriteString f,classname
				
				WriteFloat f,EntityX(node)
				WriteFloat f,EntityY(node)
				WriteFloat f,EntityZ(node)
				
				WriteFloat f,Float(KeyValue(node,"range","1.0"))
				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),1)
				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),2)
				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),3)
				WriteFloat f,Float(KeyValue(node,"intensity","1.0"))
			Case "spotlight"
				WriteByte f,6 ;WriteString f,classname
				
				WriteFloat f,EntityX(node)
				WriteFloat f,EntityY(node)
				WriteFloat f,EntityZ(node)
				
				WriteFloat f,Float(KeyValue(node,"range","1"))
				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),1)
				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),2)
				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),3)
				WriteFloat f,Float(KeyValue(node,"intensity","1.0"))
				WriteFloat f,Piece(KeyValue(node,"angles","0 0 0"),1)
				WriteFloat f,Piece(KeyValue(node,"angles","0 0 0"),2)
				WriteFloat f,Piece(KeyValue(node,"angles","0 0 0"),3)
				
				WriteFloat f,Float(KeyValue(node,"innerconeangle",""))
				WriteFloat f,Float(KeyValue(node,"outerconeangle",""))
			Case "soundemitter"
				WriteByte f,7 ;WriteString f,classname
				
				WriteFloat f,EntityX(node)
				WriteFloat f,EntityY(node)
				WriteFloat f,EntityZ(node)
				
				WriteByte f,Int(KeyValue(node,"sound","0")) ;range is 0-4
				WriteFloat f,Float(KeyValue(node,"range","1"))
;			Case "playerstart" ;this doesn't exist
;				WriteString f,classname
;				
;				WriteFloat f,EntityX(node)
;				WriteFloat f,EntityY(node)
;				WriteFloat f,EntityZ(node)
;				
;				WriteString f,KeyValue(node,"angles","0 0 0")
		End Select
		
	Next
	
	;WriteString f,"EOF"
	
	CloseFile f
	
	FreeEntity drawnmesh
	FreeEntity hiddenmesh
	
End Function

Function SaveRoomMesh2(astr$,filename$) ;this converts old RMESH to RM2
	
	DebugLog filename + "___" + BaseMesh
	
	;If Right(filename, 5)="rmesh" Then filename=Left(filename, Len(filename)-5)+"b3d"
	;DebugLog filename
	
	Local node%,classname$
	Local surf%,brush%,tex%[2],texname$
	
	Local i%,j%,k%,x#,y#,z#,yaw#
	Local vertex%
	Local temp1i%,temp2i%,temp3i%
	Local temp1#,temp2#,temp3#
	Local temp1s$, temp2s$
	
	Local file$ = StripFilename(filename)
	
	Local tempmesh% = BaseMesh
	
	Local f% = WriteFile(filename)
	Local rf% = ReadFile(astr)
	
	ReadString rf
	
	Local mesh% = CreateMesh()
	Local hiddenmesh% = CreateMesh()
	Collisions 1,2,2,1
	EntityType mesh,1
	EntityPickMode mesh,2
	
	Local tsIDs% = 1
	
	WriteByte f,Asc("R") ;Room
	WriteByte f,Asc("M") ;Mesh
	WriteByte f,Asc("2") ;2
	
	temp1i=0
	
	Local wayPointIDs = 0
	
	count = ReadInt(rf)
	
	For i=1 To count ;drawn mesh
		surf=CreateSurface(mesh)
		
		brush=CreateBrush()
		
		tex[0]=0 : tex[1]=0
		
		isAlphaa=0
		For j=0 To 1
			temp1i=ReadByte(rf)
			If temp1i<>0 Then
				temp1s=ReadString(rf)
				tex[j]=0
				If tex[j]=0 Then ;texture is not in cache
					Select True
						Case temp1i<3
							tex[j]=LoadTexture(file+temp1s,1)
						Default
							tex[j]=LoadTexture(file+temp1s,3)
					End Select
					
					If tex[j]<>0 Then
						If temp1i=1 Then TextureBlend tex[j],5
					EndIf
					
				EndIf
				If tex[j]<>0 Then
					isAlphaa=2
					If temp1i=3 Then isAlphaa=1
					
					TextureCoords tex[j],1-j
					
					alreadyExists% = False
					For ts.TexSaves = Each TexSaves
						If ts\name=StripPath(TextureName(tex[j])) Then
							alreadyExists = True: Exit
						EndIf
					Next
					If Not alreadyExists Then
						ts.TexSaves = New TexSaves
						ts\id = tsIDs
						tsIDs=tsIDs+1
						ts\name = StripPath(TextureName(tex[j]))
						DebugLog StripPath(TextureName(tex[j]))+" vs. "+TextureName(tex[j])
						ts\alpha = isAlpha(tex[j])
					EndIf
					
				EndIf
			EndIf
		Next
		
		If isAlphaa=1 Then
			If tex[1]<>0 Then
				TextureBlend tex[1],2
				BrushTexture brush,tex[1],0,0
			EndIf
		Else
			For j=0 To 1
				If tex[j]<>0 Then
					BrushTexture brush,tex[j],0,j
					FreeTexture tex[j]
				;Else
				;	BrushTexture brush,blankTexture,0,j
				EndIf
			Next
		EndIf
		
		If isAlphaa>0 Then PaintSurface surf,brush
		
		FreeBrush brush : brush = 0
		
		count2=ReadInt(rf) ;vertices
		
		For j%=1 To count2
			;world coords
			x#=ReadFloat(rf) : y#=ReadFloat(rf) : z#=ReadFloat(rf)
			vertex=AddVertex(surf,x,y,z)
			
			;texture coords
			For k%=0 To 1
				u#=ReadFloat(rf) : v#=ReadFloat(rf)
				VertexTexCoords surf,vertex,u,v,0.0,k
			Next
			
			;colors
			temp1i=ReadByte(rf)
			temp2i=ReadByte(rf)
			temp3i=ReadByte(rf)
			VertexColor surf,vertex,temp1i,temp2i,temp3i,1.0
		Next
		
		count2=ReadInt(rf) ;polys
		For j%=1 To count2
			temp1i = ReadInt(rf) : temp2i = ReadInt(rf) : temp3i = ReadInt(rf)
			AddTriangle(surf,temp1i,temp2i,temp3i)
		Next
	Next
	
	;WriteString f,"hidden"
	
	count=ReadInt(rf) ;invisible collision mesh
	For i%=1 To count
		If CountSurfaces(hiddenmesh)<1 Then
			surf=CreateSurface(hiddenmesh)
		Else
			surf=GetSurface(hiddenmesh,1)
		EndIf
		count2=ReadInt(rf) ;vertices
		For j%=1 To count2
			;world coords
			x#=ReadFloat(rf) : y#=ReadFloat(rf) : z#=ReadFloat(rf)
			vertex=AddVertex(surf,x,y,z)
		Next
		
		count2=ReadInt(rf) ;polys
		For j%=1 To count2
			temp1i = ReadInt(rf) : temp2i = ReadInt(rf) : temp3i = ReadInt(rf)
			AddTriangle(surf,temp1i,temp2i,temp3i)
		Next
	Next
	
	WriteByte f,tsIDs-1
	
	Local wtsIDs = 0
	For j=1 To tsIDs-1
		For ts.TexSaves = Each TexSaves
			If ts\id=j Then
				WriteByte f,Len(ts\name) ;we assume that texture names don't need more than 255 characters
				For i=1 To Len(ts\name)
					WriteByte f,Asc(Mid(ts\name,i,1))
				Next
				WriteByte f,ts\alpha
				Exit
			EndIf
		Next
	Next
	
	Local pointEntities% = ReadInt(rf)
	If pointEntities>253 Then RuntimeError "Too many entities"
	WriteByte f,pointEntities+2 ;add mesh entites (drawn and hidden)
	
	WriteByte f,0
	
	WriteByte f,CountSurfaces(mesh) : DebugLog CountSurfaces(mesh)
	For i%=1 To CountSurfaces(mesh)
		surf=GetSurface(mesh,i)
		brush=GetSurfaceBrush(surf)
		
		tex0%=0
		tex0%=GetBrushTexture(brush,0)
		tex1%=0
		tex1%=GetBrushTexture(brush,1)
		
		If tex0<>0 Then
			If TextureName(tex0)="" Then
				FreeTexture tex0
				tex0=0
			EndIf
		EndIf
		If tex1<>0 Then
			If TextureName(tex1)="" Then
				FreeTexture tex1
				tex1=0
			EndIf
		EndIf
		
		WriteByte(f,(tex0<>0) Or ((tex1<>0) Shl 1))
		
		If tex0<>0 Then
			;WriteByte(f,1)
			If TextureName(tex0)<>"" Then
				found% = False
				For ts.TexSaves = Each TexSaves
					If ts\name = StripPath(TextureName(tex0)) Then
						WriteByte f,ts\id ;just save the id
						found = True
						Exit
					EndIf
				Next
				If Not found Then RuntimeError TextureName(tex0)+" tex0"
			EndIf
			;WriteByte(f,isAlpha(tex))
			;texname=TextureName(tex)
			;WriteString f,StripPath(texname)
			FreeTexture tex0
		Else
			;WriteByte(f,0)
		EndIf
		
		If tex1<>0 Then
			;WriteByte(f,isAlpha(tex))
			If TextureName(tex1)<>"" Then
				found% = False
				For ts.TexSaves = Each TexSaves
					If ts\name = StripPath(TextureName(tex1)) Then
						WriteByte f,ts\id ;just save the id
						found = True
						Exit
					EndIf
				Next
				If Not found Then RuntimeError TextureName(tex1)+" tex1"
			EndIf
			FreeTexture tex1
		Else
			;WriteByte(f,0)
		EndIf
		
		FreeBrush brush
		
		WriteInt f,CountVertices(surf) : DebugLog CountVertices(surf)
		For j%=0 To CountVertices(surf)-1
			
			;world coords
			WriteFloat f,VertexX(surf,j)
			WriteFloat f,VertexY(surf,j)
			WriteFloat f,VertexZ(surf,j)
			
			;texture coords
			WriteFloat f,VertexU(surf,j,0)
			WriteFloat f,VertexV(surf,j,0)
			
			WriteFloat f,VertexU(surf,j,1)
			WriteFloat f,VertexV(surf,j,1)
			
			;colors
			WriteByte f,VertexRed(surf,j)
			WriteByte f,VertexGreen(surf,j)
			WriteByte f,VertexBlue(surf,j)
		Next
		
		WriteInt f,CountTriangles(surf)
		For j%=0 To CountTriangles(surf)-1
			WriteInt f,TriangleVertex(surf,j,0)
			WriteInt f,TriangleVertex(surf,j,1)
			WriteInt f,TriangleVertex(surf,j,2)
		Next
	Next
	
	If CountSurfaces(hiddenmesh)>0 Then
		WriteByte f,2 ;hidden
		surf=GetSurface(hiddenmesh,1)
		WriteInt f,CountVertices(surf)
		For j%=0 To CountVertices(surf)-1
			;world coords
			WriteFloat f,VertexX(surf,j)
			WriteFloat f,VertexY(surf,j)
			WriteFloat f,VertexZ(surf,j)
		Next
		
		WriteInt f,CountTriangles(surf)
		For j%=0 To CountTriangles(surf)-1
			WriteInt f,TriangleVertex(surf,j,0)
			WriteInt f,TriangleVertex(surf,j,1)
			WriteInt f,TriangleVertex(surf,j,2)
		Next
	EndIf
	
	For i%=1 To pointEntities
		temp1s=ReadString(rf)
		Select temp1s
			Case "screen"
				
				temp1=ReadFloat(rf)
				temp2=ReadFloat(rf)
				temp3=ReadFloat(rf)
				
				temp2s$ =ReadString(rf)
				
				WriteByte f,3 ;WriteString f,classname
				
				WriteFloat f,temp1
				WriteFloat f,temp2
				WriteFloat f,temp3
				
				WriteByte f,Len(temp2s) ;we assume that texture names don't need more than 255 characters
				For i=1 To Len(temp2s)
					WriteByte f,Asc(Mid(temp2s,i,1))
				Next
				
			Case "waypoint"
				
				;when RMesh 1 was used, waypoints were connected automatically
				;do that here and save the results to the file
				
				temp1=ReadFloat(rf)
				temp2=ReadFloat(rf)
				temp3=ReadFloat(rf)
				
				Local w.TempWayPoint = New TempWayPoint
				w\x = temp1
				w\y = temp2
				w\z = temp3
				wayPointIDs=wayPointIDs+1
				w\name = Str(wayPointIDs)
				w\id = wayPointIDs
				
				DebugLog "waypoint"
				conCount% = 0
				For wp.TempWayPoint = Each TempWayPoint
					If wp<>w Then
						If Not LinePick(temp1,temp2,temp3, wp\x-temp1, wp\y-temp2, wp\z-temp3,1.0) Then
							isntDuplicate = True
							For j%=0 To 9
								If wp\connections[j]=w\name Then
									isntDuplicate=False
									Exit
								EndIf
							Next
							If isntDuplicate Then
								w\connectionCount=w\connectionCount+1
								w\connections[conCount]=wp\name
								conCount=conCount+1
								DebugLog "found connection: "+w\name+" & "+wp\name
							EndIf
						EndIf
					EndIf
					If conCount>9 Then Exit
				Next
				
;				w\roomtemplate = rt
;				w\x = temp1
;				w\y = temp2
;				w\z = temp3
				
			Case "light"
				
				WriteByte f,5
				
				temp1=ReadFloat(rf)
				temp2=ReadFloat(rf)
				temp3=ReadFloat(rf)
				WriteFloat f,temp1
				WriteFloat f,temp2
				WriteFloat f,temp3
				
				;If temp1<>0 Or temp2<>0 Or temp3<>0 Then 
				range# = ReadFloat(rf)
				WriteFloat f,range
				lcolor$=ReadString(rf)
				intensity# = ReadFloat(rf)
				r%=Int(Piece(lcolor,1," "));*intensity
				g%=Int(Piece(lcolor,2," "));*intensity
				b%=Int(Piece(lcolor,3," "));*intensity
				WriteByte f,r : WriteByte f,g : WriteByte f,b
				WriteFloat f,intensity
					
					;AddTempLight(rt, temp1,temp2,temp3, 2, range, r,g,b)
				;Else
				;	ReadFloat(rf) : ReadString(rf) : ReadFloat(rf)
				;EndIf
				
			Case "spotlight"
				
				WriteByte f,6
				
				temp1=ReadFloat(rf)
				temp2=ReadFloat(rf)
				temp3=ReadFloat(rf)
				WriteFloat f,temp1
				WriteFloat f,temp2
				WriteFloat f,temp3
				
				;If temp1<>0 Or temp2<>0 Or temp3<>0 Then 
				range# = ReadFloat(rf)
				WriteFloat f,range
				lcolor$=ReadString(rf)
				intensity# = ReadFloat(rf)
				r%=Int(Piece(lcolor,1," "));*intensity
				g%=Int(Piece(lcolor,2," "));*intensity
				b%=Int(Piece(lcolor,3," "));*intensity
				WriteByte f,r : WriteByte f,g : WriteByte f,b
				WriteFloat f,intensity
				
				angles$=ReadString(rf)
				pitch#=Piece(angles,1," ")
				yaw#=Piece(angles,2," ")
				roll#=Piece(angles,3," ")
				WriteFloat f,pitch
				WriteFloat f,yaw
				WriteFloat f,roll
				
				WriteFloat f,ReadInt(rf) ;innerangle
				WriteFloat f,ReadInt(rf) ;outerangle
				;Else
				;	ReadFloat(rf) : ReadString(rf) : ReadFloat(rf) : ReadString(rf) : ReadInt(rf) : ReadInt(rf)
				;EndIf
				
			Case "soundemitter"
				
				WriteByte f,7
				
				WriteFloat f,ReadFloat(rf)
				WriteFloat f,ReadFloat(rf)
				WriteFloat f,ReadFloat(rf)
				WriteByte f,ReadInt(rf)
				WriteFloat f,ReadFloat(rf)
				
			Case "playerstart"
				
				temp1=ReadFloat(rf) : temp2=ReadFloat(rf) : temp3=ReadFloat(rf)
				
				angles$=ReadString(f)
				pitch#=Piece(angles,1," ")
				yaw#=Piece(angles,2," ")
				roll#=Piece(angles,3," ")
				
				RuntimeError "Find a way to handle this"
				
		End Select
	Next
	
	For wp.TempWayPoint = Each TempWayPoint
		WriteByte f,4
		
		WriteFloat f,wp\x
		WriteFloat f,wp\y
		WriteFloat f,wp\z
		
		WriteByte f,wp\connectionCount
		
		error% = 0
		For con%=0 To wp\connectionCount-1
			error = con
			For wp2.TempWayPoint = Each TempWayPoint
				If Lower(wp2\name)=Lower(wp\connections[con]) Then
					error = 0
					WriteByte f,wp2\id
					Exit
				EndIf
			Next
			If error>0 Then RuntimeError "Waypoint "+wp\name+" is linked to non-existant waypoint "+wp\connections[error]
		Next
	Next
	
;	For wp.TempWayPoint = Each TempWayPoint
;		WriteByte f,4
;		
;		WriteFloat f,wp\x
;		WriteFloat f,wp\y
;		WriteFloat f,wp\z
;		
;		WriteByte f,wp\connectionCount
;		
;		error% = 0
;		For con%=0 To wp\connectionCount-1
;			error = con
;			For wp2.TempWayPoint = Each TempWayPoint
;				If Lower(wp2\name)=Lower(wp\connections[con]) Then
;					error = 0
;					WriteByte f,wp2\id
;					Exit
;				EndIf
;			Next
;			If error>0 Then RuntimeError "Waypoint "+wp\name+" is linked to non-existant waypoint "+wp\connections[error]
;		Next
;	Next
	
;	For c%=1 To CountChildren(tempmesh)
;		
;		node=GetChild(tempmesh,c)
;		classname$=Lower(KeyValue(node,"classname"))
;		
;		Select classname
;			Case "screen"
;				WriteByte f,3 ;WriteString f,classname
;				
;				WriteFloat f,EntityX(node)
;				WriteFloat f,EntityY(node)
;				WriteFloat f,EntityZ(node)
;				
;				WriteString f,KeyValue(node,"imgpath","")
;;			Case "waypoint"
;;				WriteByte f,4 ;WriteString f,classname
;;				
;;				WriteFloat f,EntityX(node)
;;				WriteFloat f,EntityY(node)
;;				WriteFloat f,EntityZ(node)
;			Case "light"
;				WriteByte f,5 ;WriteString f,classname
;				
;				WriteFloat f,EntityX(node)
;				WriteFloat f,EntityY(node)
;				WriteFloat f,EntityZ(node)
;				
;				WriteFloat f,Float(KeyValue(node,"range","1.0"))
;				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),1)
;				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),2)
;				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),3)
;				WriteFloat f,Float(KeyValue(node,"intensity","1.0"))
;			Case "spotlight"
;				WriteByte f,6 ;WriteString f,classname
;				
;				WriteFloat f,EntityX(node)
;				WriteFloat f,EntityY(node)
;				WriteFloat f,EntityZ(node)
;				
;				WriteFloat f,Float(KeyValue(node,"range","1"))
;				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),1)
;				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),2)
;				WriteByte f,Piece(KeyValue(node,"color","255 255 255"),3)
;				WriteFloat f,Float(KeyValue(node,"intensity","1.0"))
;				WriteFloat f,Piece(KeyValue(node,"angles","0 0 0"),1)
;				WriteFloat f,Piece(KeyValue(node,"angles","0 0 0"),2)
;				WriteFloat f,Piece(KeyValue(node,"angles","0 0 0"),3)
;				
;				WriteFloat f,Float(KeyValue(node,"innerconeangle",""))
;				WriteFloat f,Float(KeyValue(node,"outerconeangle",""))
;			Case "soundemitter"
;				WriteByte f,7 ;WriteString f,classname
;				
;				WriteFloat f,EntityX(node)
;				WriteFloat f,EntityY(node)
;				WriteFloat f,EntityZ(node)
;				
;				WriteByte f,Int(KeyValue(node,"sound","0")) ;range is 0-4
;				WriteFloat f,Float(KeyValue(node,"range","1"))
;;			Case "playerstart" ;this doesn't exist
;;				WriteString f,classname
;;				
;;				WriteFloat f,EntityX(node)
;;				WriteFloat f,EntityY(node)
;;				WriteFloat f,EntityZ(node)
;;				
;;				WriteString f,KeyValue(node,"angles","0 0 0")
;		End Select
;		
;	Next
	
	;WriteString f,"EOF"
	
	CloseFile f
	CloseFile rf
	
	FreeEntity mesh
	FreeEntity hiddenmesh
	
End Function

;INI-funktiot:
Function GetINIString$(file$, section$, parameter$)
	Local TemporaryString$ = ""
	Local f = ReadFile(file)
	
	While Not Eof(f)
		If ReadLine(f) = "["+section+"]" Then
			Repeat 
				TemporaryString = ReadLine(f)
				If Trim( Left(TemporaryString, Max(Instr(TemporaryString,"=")-1,0)) ) = parameter Then
					CloseFile f
					Return Trim( Right(TemporaryString,Len(TemporaryString)-Instr(TemporaryString,"=")) )
				EndIf
			Until Left(TemporaryString,1) = "[" Or Eof(f)
			CloseFile f
			Return ""
		EndIf
	Wend
	
	CloseFile f
End Function

Function GetINIInt%(file$, section$, parameter$)
	Local strtemp$ = Lower(GetINIString(file$, section$, parameter$))
	
	Select strtemp
		Case "true"
			Return 1
		Case "false"
			Return 0
		Default
			Return Int(strtemp)
	End Select
	Return 
End Function

Function GetINIFloat#(file$, section$, parameter$)
	Return GetINIString(file$, section$, parameter$)
End Function

Function PutINIValue%(INI_sAppName$, INI_sSection$, INI_sKey$, INI_sValue$)
	
; Returns: True (Success) or False (Failed)
	
	INI_sSection = "[" + Trim$(INI_sSection) + "]"
	INI_sUpperSection$ = Upper$(INI_sSection)
	INI_sKey = Trim$(INI_sKey)
	INI_sValue = Trim$(INI_sValue)
	INI_sFilename$ = CurrentDir$() + "\"  + INI_sAppName
	
; Retrieve the INI data (if it exists)
	
	INI_sContents$= INI_FileToString(INI_sFilename)
	
; (Re)Create the INI file updating/adding the SECTION, KEY and VALUE
	
	INI_bWrittenKey% = False
	INI_bSectionFound% = False
	INI_sCurrentSection$ = ""
	
	INI_lFileHandle = WriteFile(INI_sFilename)
	If INI_lFileHandle = 0 Then Return False ; Create file failed!
	
	INI_lOldPos% = 1
	INI_lPos% = Instr(INI_sContents, Chr$(0))
	
	While (INI_lPos <> 0)
		
		INI_sTemp$ =Trim$(Mid$(INI_sContents, INI_lOldPos, (INI_lPos - INI_lOldPos)))
		
		If (INI_sTemp <> "") Then
			
			If Left$(INI_sTemp, 1) = "[" And Right$(INI_sTemp, 1) = "]" Then
				
				; Process SECTION
				
				If (INI_sCurrentSection = INI_sUpperSection) And (INI_bWrittenKey = False) Then
					INI_bWrittenKey = INI_CreateKey(INI_lFileHandle, INI_sKey, INI_sValue)
				End If
				INI_sCurrentSection = Upper$(INI_CreateSection(INI_lFileHandle, INI_sTemp))
				If (INI_sCurrentSection = INI_sUpperSection) Then INI_bSectionFound = True
				
			Else
				
				; KEY=VALUE
				
				lEqualsPos% = Instr(INI_sTemp, "=")
				If (lEqualsPos <> 0) Then
					If (INI_sCurrentSection = INI_sUpperSection) And (Upper$(Trim$(Left$(INI_sTemp, (lEqualsPos - 1)))) = Upper$(INI_sKey)) Then
						If (INI_sValue <> "") Then INI_CreateKey INI_lFileHandle, INI_sKey, INI_sValue
						INI_bWrittenKey = True
					Else
						WriteLine INI_lFileHandle, INI_sTemp
					End If
				End If
				
			End If
			
		End If
		
		; Move through the INI file...
		
		INI_lOldPos = INI_lPos + 1
		INI_lPos% = Instr(INI_sContents, Chr$(0), INI_lOldPos)
		
	Wend
	
	; KEY wasn't found in the INI file - Append a new SECTION if required and create our KEY=VALUE line
	
	If (INI_bWrittenKey = False) Then
		If (INI_bSectionFound = False) Then INI_CreateSection INI_lFileHandle, INI_sSection
		INI_CreateKey INI_lFileHandle, INI_sKey, INI_sValue
	End If
	
	CloseFile INI_lFileHandle
	
	Return True ; Success
	
End Function


Function INI_FileToString$(INI_sFilename$)
	
	INI_sString$ = ""
	INI_lFileHandle% = ReadFile(INI_sFilename)
	If INI_lFileHandle <> 0 Then
		While Not(Eof(INI_lFileHandle))
			INI_sString = INI_sString + ReadLine$(INI_lFileHandle) + Chr$(0)
		Wend
		CloseFile INI_lFileHandle
	End If
	Return INI_sString
	
End Function

Function INI_CreateSection$(INI_lFileHandle%, INI_sNewSection$)
	
	If FilePos(INI_lFileHandle) <> 0 Then WriteLine INI_lFileHandle, "" ; Blank line between sections
	WriteLine INI_lFileHandle, INI_sNewSection
	Return INI_sNewSection
	
End Function

Function INI_CreateKey%(INI_lFileHandle%, INI_sKey$, INI_sValue$)
	
	WriteLine INI_lFileHandle, INI_sKey + "=" + INI_sValue
	Return True
	
End Function

; matemaattiset funktiot:
Function Min#(a#,b#)
	If a < b Then Return a Else Return b
End Function

Function Max#(a#,b#)
	If a > b Then Return a Else Return b
End Function

Local state%=0

SetBuffer BackBuffer()
ClsColor 0,0,0
Cls
Color 255,255,255
Text 5,5,"Press a key:"
Text 5,25,"1 - Convert B3D (generated by 3D World Studio) to RMESH"
Text 5,45,"2 - Convert RMESH to RM2"
Text 5,65,"3 - Reset rooms.ini to use B3D meshes"
Text 5,85,"ESC - Close without doing anything"
Flip

While (Not KeyHit(1))
	If KeyHit(2) Or KeyHit(79) Then state=1 : Exit
	If KeyHit(3) Or KeyHit(80) Then state=2 : Exit
	If KeyHit(4) Or KeyHit(81) Then state=3 : Exit
Wend

Local Stri$,TemporaryString$,f%

Type INIConvert
	Field file$
	Field section$
	Field key$
	Field value$
End Type

Local ic.INIConvert

If state=1 Then ;convert B3D to Rmesh
	
	If FileSize("Data\rooms_b3d.ini")=0 Then
		CopyFile "Data\rooms.ini","Data\rooms_b3d.ini"
	EndIf
	
	f%=ReadFile("Data\rooms.ini")
	
	While Not Eof(f)
		TemporaryString = Trim(ReadLine(f))
		If Left(TemporaryString,1) = "[" Then
			TemporaryString = Mid(TemporaryString, 2, Len(TemporaryString) - 2)
			
			If TemporaryString <> "room ambience" Then
				Stri=GetINIString("Data\rooms.ini",TemporaryString,"mesh path")
				
				mesh=LoadAnimMesh(Stri)
				SaveRoomMesh(mesh,Replace(Stri,".b3d",".rm2"))
				For ts.TexSaves = Each TexSaves
					Delete ts
				Next
				For wp.TempWayPoint = Each TempWayPoint
					Delete wp
				Next
				
				Cls
				Text 5,5,"Converted "+Chr(34)+Stri+Chr(34)
				Flip
				
				ic.INIConvert=New INIConvert
				ic\file="Data\rooms.ini"
				ic\section=TemporaryString
				ic\key="mesh path"
				ic\value=Replace(Stri,".b3d",".rm2")
				
				;PutINIValue("Data\rooms.ini",TemporaryString,"mesh path",Replace(Stri,".b3d",".rmesh"))
			EndIf
		EndIf
	Wend
	
	For ic.INIConvert=Each INIConvert
		PutINIValue(ic\file,ic\section,ic\key,ic\value)
	Next
	
	Cls
	Text 5,5,"Conversion complete"
	Flip
	Delay 1000
	
	CloseFile f
	
Else If state=2
	
	If FileSize("Data\rooms_rmesh.ini")=0 Then
		CopyFile "Data\rooms.ini","Data\rooms_rmesh.ini"
	EndIf
	
	f%=ReadFile("Data\rooms.ini")
	
	While Not Eof(f)
		TemporaryString = Trim(ReadLine(f))
		If Left(TemporaryString,1) = "[" Then
			TemporaryString = Mid(TemporaryString, 2, Len(TemporaryString) - 2)
			
			If TemporaryString <> "room ambience" Then
				Stri=GetINIString("Data\rooms.ini",TemporaryString,"mesh path")
				
				SaveRoomMesh2(Stri,Replace(Stri,".rmesh",".rm2"))
				For ts.TexSaves = Each TexSaves
					Delete ts
				Next
				For wp.TempWayPoint = Each TempWayPoint
					Delete wp
				Next
				
				Cls
				Text 5,5,"Converted "+Chr(34)+Stri+Chr(34)
				Flip
				
				ic.INIConvert=New INIConvert
				ic\file="Data\rooms.ini"
				ic\section=TemporaryString
				ic\key="mesh path"
				ic\value=Replace(Stri,".rmesh",".rm2")
				
				;PutINIValue("Data\rooms.ini",TemporaryString,"mesh path",Replace(Stri,".b3d",".rmesh"))
			EndIf
		EndIf
	Wend
	
	For ic.INIConvert=Each INIConvert
		PutINIValue(ic\file,ic\section,ic\key,ic\value)
	Next
	
	Cls
	Text 5,5,"Conversion complete"
	Flip
	Delay 1000
	
	CloseFile f
	
Else If state=3
	f%=ReadFile("Data\rooms.ini")
	
	While Not Eof(f)
		TemporaryString = Trim(ReadLine(f))
		If Left(TemporaryString,1) = "[" Then
			TemporaryString = Mid(TemporaryString, 2, Len(TemporaryString) - 2)
			
			If TemporaryString <> "room ambience" Then
				Stri=GetINIString("Data\rooms.ini",TemporaryString,"mesh path")
				
				ic.INIConvert=New INIConvert
				ic\file="Data\rooms.ini"
				ic\section=TemporaryString
				ic\key="mesh path"
				ic\value=Replace(Stri,".rm2",".b3d")
				
				;PutINIValue("Data\rooms.ini",TemporaryString,"mesh path",Replace(Stri,".rmesh",".b3d"))
			EndIf
		EndIf
	Wend
	
	For ic.INIConvert=Each INIConvert
		PutINIValue(ic\file,ic\section,ic\key,ic\value)
	Next
	
	Cls
	Text 5,5,"Reset complete"
	Flip
	Delay 1000
	
	CloseFile(f)
EndIf
;~IDEal Editor Parameters:
;~F#9#1A#2A#2F#34#39#4A#60#7B#81
;~C#Blitz3D